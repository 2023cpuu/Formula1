# Importo las librer√≠as necesarias para que funcione la app
import streamlit as st
import pandas as pd
import pydeck as pdk
import altair as alt
from datetime import datetime
import time
import random

# ====================== ESTILO GENERAL: fondo blanco con patr√≥n de bandera a cuadros ======================
# Ac√° le doy estilo a toda la p√°gina para que tenga un fondo de banderita a cuadros y los contenedores se vean bien legibles

st.markdown(
    """
    <style>
    html, body, .stApp {
        height: 100%;
        margin: 0;
        padding: 0;
        background-color: white;
        background-image: repeating-conic-gradient(#fff 0% 25%, #000 0% 50%);
        background-size: 40px 40px;
    }

    .block-container {
        background-color: rgba(255, 255, 255, 0.95);
        padding: 3rem;
        border-radius: 15px;
        box-shadow: 0px 0px 10px rgba(0,0,0,0.3);
    }

    .block-container h1, .block-container h2, .block-container h3,
    .block-container h4, .block-container h5, .block-container h6,
    .block-container p, .block-container label, .block-container div {
        color: black !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ====================== ANIMACI√ìN INICIAL: auto corriendo de derecha a izquierda ======================
# Esta parte hace que un autito üèéÔ∏è pase al principio para que la app tenga m√°s personalidad y enganche
car_animation = """
<div style="position:relative; height:160px; overflow:hidden;">
    <div style="
        position:absolute;
        left: 100%;
        top:20px;
        animation: drive 3s linear forwards;
        font-size: 120px;">
        üèéÔ∏èüí®
    </div>
</div>

<style>
@keyframes drive {
    0% { left: 100%; }
    100% { left: -500px; }
}
</style>
"""

# Muestro la animaci√≥n y espero 3.5 segundos para que termine antes de mostrar el resto
st.markdown(car_animation, unsafe_allow_html=True)
time.sleep(3.5)

# ====================== T√çTULO Y PRESENTACI√ìN ======================
# Este es el t√≠tulo principal que estar√° siempre arriba. Debajo, una imagen ic√≥nica y un texto que introduce la idea de la app

st.markdown("<h1 style='text-align: center;'>La F√≥rmula de los 50s</h1>", unsafe_allow_html=True)

st.image("https://i.imgur.com/tXsjOO5.png", caption="Alfa Romeo 158 en el GP de Gran Breta√±a, 1950", use_container_width=True)

st.markdown("""
<div style="background-color: rgba(255, 255, 255, 0.92); padding: 1.5rem; border-radius: 12px; margin-top: 1rem;">
    <h4 style="color: black;">üèÅ Bienvenido a la era dorada de la F1</h4>
    <p style="color: black; font-size: 16px; line-height: 1.6;">
        Antes de los autos h√≠bridos, de los cascos ultratecnol√≥gicos y de las radios con estrategias complicadas, la F√≥rmula 1 era puro coraz√≥n, instinto y gasolina. Los a√±os 50 fueron el inicio de una leyenda: pilotos temerarios, escuder√≠as m√≠ticas y circuitos que hac√≠an historia vuelta a vuelta.
    </p>
    <p style="color: black; font-size: 16px; line-height: 1.6;">
        Esta p√°gina no es solo una base de datos: es un viaje interactivo a la d√©cada donde todo comenz√≥. ¬øHubo una carrera en tu cumplea√±os? ¬øQu√© equipo de los 50s te representa m√°s? ¬øCu√°nto sabes realmente sobre Fangio, Ascari o los peligrosos circuitos de la √©poca?
    </p>
    <p style="color: black; font-size: 16px; font-weight: bold;">
        Hoy muchos conocen a Verstappen o Hamilton, pero pocos a Fangio o Ascari. Esta web busca cambiar eso.<br>
        Explora, juega, descubre. Porque entender el presente de la F1 tambi√©n es rendir homenaje a su pasado m√°s bravo. üèéÔ∏è‚ú®
    </p>
</div>
""", unsafe_allow_html=True)

# ===================== CARGA DE DATOS =====================
# Cargo el archivo CSV con los resultados de todas las carreras de los 50s
# Tambi√©n convierto la fecha a formato datetime para poder usarla luego

@st.cache_data
def load_data():
    df = pd.read_csv("F1_1950s_Race_Results_FULL.csv")
    df["Date_Parsed"] = pd.to_datetime(df["Date"], format="%d %b %Y", errors='coerce')
    return df.dropna(subset=["Date_Parsed"])

# Llamo a la funci√≥n y guardo el DataFrame como races_df
races_df = load_data()

# ===================== TRADUCCI√ìN DE NOMBRES =====================
# Para que se entienda mejor, traduzco los nombres de los GP a pa√≠ses, y tambi√©n los meses a espa√±ol

gp_to_country = {
    "British": "Reino Unido", "French": "Francia", "Italian": "Italia", "German": "Alemania",
    "Monaco": "M√≥naco", "Belgian": "B√©lgica", "Dutch": "Pa√≠ses Bajos", "Swiss": "Suiza",
    "Argentine": "Argentina", "Indianapolis 500": "Estados Unidos", "Spanish": "Espa√±a",
    "Portuguese": "Portugal", "Moroccan": "Marruecos"
}

month_translation = {
    "Jan": "Enero", "Feb": "Febrero", "Mar": "Marzo", "Apr": "Abril", "May": "Mayo", "Jun": "Junio",
    "Jul": "Julio", "Aug": "Agosto", "Sep": "Septiembre", "Oct": "Octubre", "Nov": "Noviembre", "Dec": "Diciembre"
}

# Traducci√≥n de GP a circuito espec√≠fico (esto me sirve m√°s adelante para el mapa y los tooltips)
gp_to_circuits = {
    "Argentine": ["Aut√≥dromo Juan y Oscar G√°lvez"],
    "Belgian": ["Spa-Francorchamps"],
    "British": ["Silverstone", "Aintree"],
    "Dutch": ["Zandvoort"],
    "French": ["Reims-Gueux", "Rouen-Les-Essarts"],
    "German": ["N√ºrburgring", "AVUS"],
    "Indianapolis 500": ["Indianapolis Motor Speedway"],
    "Italian": ["Autodromo Nazionale Monza", "Circuito di Pescara"],
    "Monaco": ["Circuit de Monaco"],
    "Moroccan": ["Ain-Diab Circuit"],
    "Portuguese": ["Boavista", "Monsanto Park"],
    "Spanish": ["Pedralbes"],
    "Swiss": ["Bremgarten"]
}

# üîß Normalizo cualquier nombre que sea Indian√°polis a una sola forma
races_df.loc[races_df["Grand Prix"].str.contains("indianapolis", case=False, na=False), "Grand Prix"] = "Indianapolis 500"

# üó∫Ô∏è Ahora mapeo correctamente los pa√≠ses
races_df["Pa√≠s"] = races_df["Grand Prix"].map(gp_to_country)

# üîÅ Reafirmo que "Indianapolis 500" pertenece a Estados Unidos
races_df.loc[races_df["Grand Prix"] == "Indianapolis 500", "Pa√≠s"] = "Estados Unidos"



# ===================== SECCI√ìN: ¬øPOR QU√â LOS 50S? =====================
# En vez de decir "justificaci√≥n", hago esta secci√≥n donde impl√≠citamente explico por qu√© vale la pena mirar esa d√©cada

st.subheader("‚è≥ ¬øPor qu√© volver a los 50s?")
st.markdown("""
<p style="font-size: 16px; line-height: 1.6;">
En la era del streaming, las estad√≠sticas y los monoplazas futuristas, a veces olvidamos c√≥mo empez√≥ todo. 
Los a√±os 50 fueron m√°s que una introducci√≥n: fueron una √©poca donde cada victoria era una haza√±a y cada circuito, un riesgo real. 
Pocos conocen esta parte de la historia. Esta plataforma te invita a redescubrirla, interactuar con ella y hacerla tuya.
</p>
""", unsafe_allow_html=True)

# ===================== TOP 5 PILOTOS CON M√ÅS VICTORIAS =====================
# Armo una tabla con los 5 pilotos que m√°s ganaron en la d√©cada. Le sumo un gr√°fico con Altair para hacerlo visual

st.subheader("üèÜ Piloto con m√°s victorias en los 50s")

top5_winners = races_df["Winner"].value_counts().head(5).reset_index()
top5_winners.columns = ["Piloto", "Victorias"]
top5_winners.index += 1  # Para que el ranking empiece desde 1

# Hago el gr√°fico de barras
chart_winners = alt.Chart(top5_winners).mark_bar(color='crimson').encode(
    x=alt.X("Victorias:Q", axis=alt.Axis(title="Victorias", format="d")),
    y=alt.Y("Piloto:N", sort='-x', title=""),
    tooltip=["Piloto", "Victorias"]
).properties(width=600, height=250)

# Lo muestro
st.altair_chart(chart_winners, use_container_width=True)

# ===================== TOP 5 ESCUDER√çAS CON M√ÅS VICTORIAS =====================
# Igual que con los pilotos, pero ahora muestro las escuder√≠as m√°s exitosas

st.subheader("üîß Escuder√≠a m√°s dominante de los 50s")

top5_teams = races_df["Team"].value_counts().head(5).reset_index()
top5_teams.columns = ["Escuder√≠a", "Victorias"]
top5_teams.index += 1  # Empiezo desde 1 tambi√©n

# Hago el gr√°fico de barras
chart_teams = alt.Chart(top5_teams).mark_bar(color='steelblue').encode(
    x=alt.X("Victorias:Q", axis=alt.Axis(title="Victorias", format="d")),
    y=alt.Y("Escuder√≠a:N", sort='-x', title=""),
    tooltip=["Escuder√≠a", "Victorias"]
).properties(width=600, height=250)

# Lo muestro
st.altair_chart(chart_teams, use_container_width=True)

# ===================== L√çNEA DEL TIEMPO INTERACTIVA =====================
# Quise resumir los momentos m√°s importantes de cada a√±o en una especie de l√≠nea del tiempo simple con expanders

st.subheader("üìú L√≠nea del tiempo interactiva: F√≥rmula 1 en los a√±os 50")

eventos_f1_50s = {
    1950: "üèÅ Se da el primer campeonato oficial de F1. Farina vence a Fangio y gana el t√≠tulo.",
    1951: "üî• Fangio gana su primer campeonato con Alfa Romeo, convirti√©ndose en una figura dominante. Pero, por falta de apoyo financiero del gobierno italiano, su equipo decide retirarse de la competencia ese a√±o",
    1952: "üîß Ferrari domina tras la salida de Alfa Romeo. Ascari gana 6 carreras.",
    1953: "üèéÔ∏è Ascari repite t√≠tulo con Ferrari, la temporada es marcada por su consistencia.",
    1954: "‚öôÔ∏è Fangio empieza con Maserati, termina con Mercedes‚Ä¶ ¬°y gana su segundo t√≠tulo!",
    1955: "‚ò†Ô∏è Un Mercedes-Benz 300 SLR se estrella contra la tribuna en la competencia 24 horas de Le Mans, matando a m√°s de 80 espectadores y al piloto Pierre Levegh. Esto ocasiona que, aunque era una competencia distinta, Mercedes se retire tambi√©n de la F1. Fangio vuelve a campeonar.",
    1956: "üîÑ Fangio gana su cuarto t√≠tulo con un Ferrari, gracias a que su compa√±ero Collins le cedi√≥ su auto durante un pit-stop. Collins prioriz√≥ el t√≠tulo del argentino por sobre sus propias posibilidades de ganar la carrera.",
    1957: "üïäÔ∏è Fallece Eugenio Castellotti durante una sesi√≥n privada de pruebas de Ferrari en el Aut√≥dromo de M√≥dena. Fangio gana su quinto campeonato en un Maserati, lamentando la p√©rdida de su compa√±ero de equipo de 1956.",
    1958: "üß† Se establece el campeonato de constructores, el cual se otorga a la escuder√≠a que acumule m√°s puntos a lo largo de la temporada, considerando los resultados de todos sus pilotos. Gana la escuder√≠a Vanwall y Mike Hawthorn gana el campeonato de pilotos en un Ferrari. Fangio es secuestrado por 26 horas el 23 de febrero por el Movimiento 26 de Julio, el Gran Premio de Cuba no sale en las bases de datos pero se habr√≠a celebrado para atraer a turistas estadounidenses por lo que el secuestro se realiz√≥ en protesta. Este mismo a√±o, Fangio se retira de la F√≥rmula 1 despu√©s del Gran Premio de Francia en Reims.",
    1959: "üß™ Jack Brabham, piloto de Cooper, se qued√≥ sin combustible en la √∫ltima vuelta, pero logr√≥ empujar su carro hasta la meta para asegurar su primer t√≠tulo mundial."
}

# Cada a√±o aparece como expander para que el usuario vaya abri√©ndolos como quiera
for a√±o, evento in eventos_f1_50s.items():
    with st.expander(f"üìÖ {a√±o}"):
        st.markdown(f"<div style='font-size:16px'>{evento}</div>", unsafe_allow_html=True)

# ===================== ¬øHUBO UNA CARRERA EN TU CUMPLEA√ëOS? =====================
st.subheader("üéÇ ¬øHubo una carrera de F1 en tu cumplea√±os durante los a√±os 50?")

# Uso dos columnas para seleccionar d√≠a y mes
col1, col2 = st.columns(2)
birth_day = col1.selectbox("D√≠a", [""] + list(range(1, 32)))
birth_month_name = col2.selectbox("Mes", [""] + list(month_translation.values()))

if birth_day and birth_month_name:
    # Convierto el mes de texto a n√∫mero
    month_number = list(month_translation.values()).index(birth_month_name)

    # Filtro las carreras que coinciden exactamente con ese d√≠a
    matching_races = races_df[
        (races_df["Date_Parsed"].dt.day == int(birth_day)) &
        (races_df["Date_Parsed"].dt.month == month_number + 1)
    ]

    if not matching_races.empty:
        st.success("üéâ ¬°S√≠ hubo Grand Prix en tu cumplea√±os!")
        st.dataframe(matching_races[["Year", "Grand Prix", "Date", "Winner", "Team"]])
    else:
        st.warning("üò¢ No hubo ning√∫n Grand Prix ese d√≠a.")

        # Como extra, muestro la carrera m√°s cercana al cumplea√±os
        st.subheader("üìÖ Carrera m√°s cercana a tu cumplea√±os")
        ref_date = datetime(1955, month_number + 1, int(birth_day))
        races_df["Diff"] = races_df["Date_Parsed"].apply(lambda x: abs((x - ref_date).days))
        closest = races_df.loc[races_df["Diff"].idxmin()]

        # Traducci√≥n del mes al espa√±ol
        fecha_gp = closest["Date_Parsed"]
        mes_es = month_translation[fecha_gp.strftime("%b")]
        fecha_str = f"{fecha_gp.day} {mes_es} {fecha_gp.year}"

        # üîß Correcci√≥n robusta al traducir el GP
        gp_raw = closest["Grand Prix"]
        gp_name = gp_to_country[gp_raw] if gp_raw in gp_to_country else gp_raw

        mensaje = f"El GP de {gp_name} en {fecha_str} fue la carrera m√°s cercana a tu cumple. Gan√≥ {closest['Winner']} con {closest['Team']}."
        st.info(mensaje[0].upper() + mensaje[1:])



# ===================== ¬øQU√â PA√çS TUVO M√ÅS CARRERAS? =====================
st.subheader("üåç Pa√≠s con m√°s carreras en los 50s")

# Ajustamos la cantidad de carreras para Indian√°polis, que tuvo 10 (una por a√±o entre 1950 y 1959)
# Aseguramos que est√© correctamente registrado como "Estados Unidos"
races_df["Pa√≠s"] = races_df["Pa√≠s"].replace({
    "USA": "Estados Unidos",
    "U.S.A.": "Estados Unidos",
    "EEUU": "Estados Unidos"
})

# Validamos que cada edici√≥n de Indian√°polis est√© bien etiquetada
indy_filter = races_df["Grand Prix"] == "Indianapolis 500"
races_df.loc[indy_filter, "Pa√≠s"] = "Estados Unidos"

# Cuento cu√°ntas carreras hubo por pa√≠s
country_counts = races_df["Pa√≠s"].value_counts()
top_count = country_counts.max()
top_countries = country_counts[country_counts == top_count].index.tolist()

# Ac√° controlo c√≥mo se muestra el texto dependiendo de si hay empate entre pa√≠ses
if len(top_countries) == 1:
    pais_texto = f"{top_countries[0]} fue el pa√≠s con m√°s Grandes Premios: {top_count} en total."
elif len(top_countries) == 2:
    pais1, pais2 = top_countries
    conjuncion = "e" if pais2.strip().lower().startswith("i") else "y"
    lista_paises = f"{pais1} {conjuncion} {pais2}"
    pais_texto = f"{lista_paises} fueron los pa√≠ses con m√°s Grandes Premios: {top_count} cada uno."
else:
    lista_paises = ", ".join(top_countries[:-1]) + f" y {top_countries[-1]}"
    pais_texto = f"{lista_paises} fueron los pa√≠ses con m√°s Grandes Premios: {top_count} cada uno."

st.success(pais_texto[0].upper() + pais_texto[1:])

# Mostramos el top 5. Si Estados Unidos no est√°, lo agregamos manualmente al final
with st.expander("üìä Ver el top 5 de pa√≠ses con m√°s carreras"):
    top5_countries = country_counts.head(5).reset_index()
    top5_countries.columns = ["Pa√≠s", "Carreras"]
    top5_countries.index += 1

    if "Estados Unidos" not in top5_countries["Pa√≠s"].values:
        us_row = country_counts.loc[["Estados Unidos"]].reset_index()
        us_row.columns = ["Pa√≠s", "Carreras"]
        top5_countries = pd.concat([top5_countries, us_row], ignore_index=True)
        top5_countries.index = range(1, len(top5_countries)+1)

    st.table(top5_countries)

# ===================== MAPA INTERACTIVO (por pa√≠s con circuitos en tooltip) =====================

# Antes que nada, armamos las coordenadas manualmente (esto no lo sacamos del CSV)
country_coords = {
    "Reino Unido": [51.5, -0.1], "Francia": [48.85, 2.35], "Italia": [41.9, 12.5],
    "Alemania": [52.52, 13.4], "M√≥naco": [43.73, 7.42], "B√©lgica": [50.85, 4.35],
    "Pa√≠ses Bajos": [52.37, 4.89], "Suiza": [46.95, 7.45], "Argentina": [-34.6, -58.38],
    "Estados Unidos": [39.8, -86.1], "Espa√±a": [40.42, -3.7], "Portugal": [38.72, -9.14],
    "Marruecos": [33.58, -7.62]
}

# Armamos un diccionario que relacione pa√≠s con sus circuitos usados
circuitos_por_pais = {}
for gp, pais in gp_to_country.items():
    if gp in gp_to_circuits:
        circuitos_por_pais.setdefault(pais, set()).update(gp_to_circuits[gp])

# T√≠tulo de la secci√≥n
st.subheader("üó∫Ô∏è Mapa de pa√≠ses con carreras en los a√±os 50")

# Ahora armamos los datos para el mapa
map_data = []
for country, count in country_counts.items():
    if country in country_coords:
        lat, lon = country_coords[country]
        circuitos = sorted(circuitos_por_pais.get(country, []))
        tooltip_text = f"{country}: {count} carreras\nCircuitos: {', '.join(circuitos)}"
        map_data.append({
            "Pa√≠s": country,
            "Lat": lat,
            "Lon": lon,
            "Carreras": count,
            "Tooltip": tooltip_text
        })

# Convertimos la lista en un DataFrame para usar en el mapa
map_df = pd.DataFrame(map_data)

# Creamos la capa de puntos del mapa
layer = pdk.Layer(
    "ScatterplotLayer",
    data=map_df,
    get_position='[Lon, Lat]',  # cada punto se ubica en su lat/lon
    get_radius="Carreras * 30000",  # cuanto m√°s carreras, m√°s grande el c√≠rculo
    get_fill_color=[255, 0, 0, 180],  # color rojo transl√∫cido
    pickable=True,  # para que tenga tooltip
    auto_highlight=True
)

# Vista inicial del mapa (centrada en el mundo)
view_state = pdk.ViewState(latitude=20, longitude=0, zoom=1.2, pitch=0)

# Mostramos el mapa
st.pydeck_chart(pdk.Deck(
    layers=[layer],
    initial_view_state=view_state,
    tooltip={"text": "{Tooltip}"}  # el tooltip se muestra cuando paso el mouse
))
# ===================== EXPLORAR DESEMPE√ëO DE PILOTOS Y ESCUDER√çAS =====================

# T√≠tulo general de esta secci√≥n
st.subheader("üîç Explora desempe√±o de pilotos y escuder√≠as")

# Instrucci√≥n para el usuario
st.markdown("Selecciona **una sola opci√≥n** para ver el historial de victorias de un piloto o una escuder√≠a:")

# Creamos dos pesta√±as (tabs): una para pilotos, otra para escuder√≠as
tab1, tab2 = st.tabs(["üèéÔ∏è Ver por piloto", "üîß Ver por escuder√≠a"])

# ==== TAB 1: Por piloto ====
with tab1:
    # Extraigo la lista de pilotos √∫nicos que hayan ganado al menos una carrera
    pilotos_unicos = sorted(races_df["Winner"].dropna().unique())
    # Agrego opci√≥n por defecto "--"
    piloto = st.selectbox("Selecciona un piloto ganador", ["--"] + pilotos_unicos)

    if piloto != "--":
        # Mostramos tabla con todas sus victorias
        st.markdown(f"### üèÅ Victorias de **{piloto}** en los a√±os 50")
        victorias_piloto = races_df[races_df["Winner"] == piloto][["Year", "Grand Prix", "Date", "Team"]].sort_values("Year")
        # Resetear √≠ndice para que la tabla se vea ordenada
        victorias_piloto.reset_index(drop=True, inplace=True)
        victorias_piloto.index += 1
        victorias_piloto.index.name = "N¬∞"
        st.dataframe(victorias_piloto, use_container_width=True)

# ==== TAB 2: Por escuder√≠a ====
with tab2:
    # Lista de escuder√≠as √∫nicas que hayan ganado al menos una carrera
    escuderias_unicas = sorted(races_df["Team"].dropna().unique())
    escuderia = st.selectbox("Selecciona una escuder√≠a ganadora", ["--"] + escuderias_unicas)

    if escuderia != "--":
        st.markdown(f"### üèÜ Victorias de **{escuderia}** en los a√±os 50")
        victorias_escuderia = races_df[races_df["Team"] == escuderia][["Year", "Grand Prix", "Date", "Winner"]].sort_values("Year")
        # Ordenamos bien el √≠ndice para que se vea claro
        victorias_escuderia.reset_index(drop=True, inplace=True)
        victorias_escuderia.index += 1
        victorias_escuderia.index.name = "N¬∞"
        st.dataframe(victorias_escuderia, use_container_width=True)
# ===================== TEST: ¬øQU√â ESCUDER√çA USAR√çAS? =====================

# T√≠tulo de la secci√≥n
st.subheader("üõ†Ô∏è ¬øQu√© escuder√≠a usar√≠as?")

# Texto introductorio
st.markdown("Responde este breve test y descubre qu√© escuder√≠a de los 50s te representa mejor.")

# Diccionario con las preguntas y opciones. Cada opci√≥n tiene un perfil asociado
preguntas = {
    "¬øCu√°l es tu estilo de conducci√≥n?": {
        "Conservador, prefiero la estrategia": "estratega",
        "A la ofensiva, siempre al l√≠mite": "agresivo",
        "Equilibrado, me adapto": "equilibrado"
    },
    "¬øQu√© valoras m√°s en una escuder√≠a?": {
        "Innovaci√≥n y tecnolog√≠a": "innovador",
        "Pasi√≥n y tradici√≥n": "tradicional",
        "Precisi√≥n y eficiencia": "preciso"
    },
    "¬øQu√© tipo de piloto te identificas m√°s?": {
        "L√≠der calmado y anal√≠tico": "calculador",
        "Carism√°tico y arriesgado": "valiente",
        "Constante y t√©cnico": "disciplinado"
    }
}

# Lista para guardar las respuestas del usuario
respuestas = []
todo_listo = True  # Flag para comprobar que no falte ninguna pregunta

# Itero sobre cada pregunta y sus opciones
for i, (pregunta, opciones) in enumerate(preguntas.items()):
    st.markdown(f"**{i+1}. {pregunta}**")
    # Agrego una opci√≥n por defecto al inicio
    opciones_con_placeholder = ["Selecciona una opci√≥n..."] + list(opciones.keys())
    # Usamos un selectbox con clave distinta para cada pregunta
    seleccion = st.selectbox("", opciones_con_placeholder, key=f"preg_{i}")
    
    # Si el usuario no responde una pregunta, marcamos que no est√° todo listo
    if seleccion == "Selecciona una opci√≥n...":
        todo_listo = False
    else:
        respuestas.append(opciones[seleccion])  # Guardamos el perfil

# Bot√≥n para ver el resultado
if st.button("Descubrir mi escuder√≠a ideal"):
    if not todo_listo:
        st.warning("Por favor responde todas las preguntas antes de continuar.")
    else:
        # Contamos cu√°ntas veces se repite cada perfil en las respuestas
        conteo = pd.Series(respuestas).value_counts()
        resultado = conteo.idxmax()  # Nos quedamos con el perfil dominante

        # Diccionario que relaciona perfil con escuder√≠a
        perfil_to_team = {
            "agresivo": "Maserati",
            "estratega": "Ferrari",
            "equilibrado": "Vanwall",
            "tradicional": "Alfa Romeo",
            "innovador": "Cooper",
            "preciso": "Mercedes",
            "valiente": "BRM",
            "calculador": "Ferrari",
            "disciplinado": "Gordini"
        }

        # Buscamos la escuder√≠a final
        escuderia = perfil_to_team.get(resultado, "Ferrari")
        # Mostramos el resultado al usuario
        st.success(f"üèÅ ¬°Tu escuder√≠a ideal es **{escuderia}**!")
# ===================== TRIVIA INTERACTIVA =====================

# T√≠tulo
st.subheader("üß† Trivia")

# üìã Lista de preguntas tipo test. Cada una tiene una pregunta, opciones y respuesta correcta.
trivia_preguntas = [
    {
        "pregunta": "¬øQu√© piloto gan√≥ m√°s carreras en la d√©cada de 1950?",
        "opciones": ["Juan Manuel Fangio", "Alberto Ascari", "Stirling Moss", "Mike Hawthorn"],
        "respuesta": "Juan Manuel Fangio"
    },
    {
        "pregunta": "¬øEn qu√© circuito se corri√≥ el primer GP en 1950?",
        "opciones": ["Monza", "Silverstone", "Indian√°polis", "Zandvoort"],
        "respuesta": "Silverstone"
    },
    {
        "pregunta": "¬øQu√© pa√≠s sudamericano alberg√≥ Grandes Premios en los a√±os 50?",
        "opciones": ["Brasil", "Argentina", "Chile", "Per√∫"],
        "respuesta": "Argentina"
    },
    {
        "pregunta": "¬øQu√© piloto argentino fue cinco veces campe√≥n del mundo en los 50s?",
        "opciones": ["Carlos Reutemann", "Juan Manuel Fangio", "Ricardo Zunino", "Jos√© Froil√°n Gonz√°lez"],
        "respuesta": "Juan Manuel Fangio"
    },
    {
        "pregunta": "¬øCu√°l fue la escuder√≠a m√°s ganadora en los 50s?",
        "opciones": ["Ferrari", "Mercedes", "Maserati", "Alfa Romeo"],
        "respuesta": "Ferrari"
    },
    {
        "pregunta": "¬øEn qu√© pa√≠s se encuentra el circuito de Spa-Francorchamps?",
        "opciones": ["Francia", "B√©lgica", "Pa√≠ses Bajos", "Suiza"],
        "respuesta": "B√©lgica"
    }
]

# üëâ Variables de estado para guardar progreso y puntaje (uso st.session_state)
if "trivia_index" not in st.session_state:
    st.session_state.trivia_index = 0  # √≠ndice actual
if "trivia_opcion" not in st.session_state:
    st.session_state.trivia_opcion = None  # opci√≥n seleccionada
if "trivia_respondida" not in st.session_state:
    st.session_state.trivia_respondida = False  # si ya se respondi√≥
if "trivia_resultado" not in st.session_state:
    st.session_state.trivia_resultado = False  # si fue correcta
if "trivia_puntaje" not in st.session_state:
    st.session_state.trivia_puntaje = 0  # puntaje total

# üëâ Funci√≥n para comprobar si la opci√≥n elegida es correcta
def comprobar_respuesta():
    if st.session_state.trivia_opcion == "Selecciona una opci√≥n" or st.session_state.trivia_opcion is None:
        st.warning("Selecciona una opci√≥n v√°lida.")
    else:
        correcta = trivia_preguntas[st.session_state.trivia_index]["respuesta"]
        st.session_state.trivia_resultado = st.session_state.trivia_opcion == correcta
        st.session_state.trivia_respondida = True
        if st.session_state.trivia_resultado:
            st.session_state.trivia_puntaje += 1  # suma punto si acierta

# üëâ Funci√≥n para pasar a la siguiente pregunta
def siguiente_pregunta():
    st.session_state.trivia_index += 1
    st.session_state.trivia_opcion = None
    st.session_state.trivia_respondida = False
    st.session_state.trivia_resultado = False

# üëâ Mostrar pregunta actual
if st.session_state.trivia_index < len(trivia_preguntas):
    q = trivia_preguntas[st.session_state.trivia_index]
    opciones = ["Selecciona una opci√≥n"] + q["opciones"]

    st.markdown(f"**{q['pregunta']}**")
    st.session_state.trivia_opcion = st.radio(
        "Opciones:",
        opciones,
        index=0,
        key=f"radio_{st.session_state.trivia_index}"
    )

    # Mostrar bot√≥n para responder o siguiente pregunta seg√∫n el caso
    if not st.session_state.trivia_respondida:
        st.button("Comprobar respuesta", on_click=comprobar_respuesta)
    else:
        if st.session_state.trivia_resultado:
            st.success("‚úÖ ¬°Correcto!")
        else:
            st.error(f"‚ùå Incorrecto. La respuesta correcta era: {q['respuesta']}")
        st.button("Siguiente pregunta", on_click=siguiente_pregunta)

else:
    # Cuando se termina la trivia, mostrar puntaje final
    st.success(f"üéâ ¬°Has terminado la trivia! Obtuviste {st.session_state.trivia_puntaje} de {len(trivia_preguntas)} puntos.")

# ===================== CIERRE REFLEXIVO / CONTEXTO FINAL =====================

# Esta secci√≥n cierra la web d√°ndole sentido a todo el recorrido sin necesidad de decir ‚Äúesta es una justificaci√≥n‚Äù.

st.markdown("## üì¶ ¬øQu√© nos deja volver al pasado?")

st.markdown("""
<div style="background-color: #ffffffdd; padding: 1.5rem; border-radius: 12px; margin-top: 1rem;">
    <p style="color: black; font-size: 16px; line-height: 1.7;">
        A lo largo de esta p√°gina vimos que los a√±os 50 no fueron una simple etapa temprana de la F√≥rmula 1. 
        Fueron un laboratorio de riesgo, de ingenio y de pasi√≥n desmedida. 
        Sus protagonistas no ten√≠an simuladores ni telemetr√≠a, pero s√≠ una voluntad inquebrantable.
    </p>
    <p style="color: black; font-size: 16px; line-height: 1.7;">
        Quiz√° al principio te preguntabas por qu√© mirar tan atr√°s. Ahora sabes que Fangio no es solo una calle 
        o una estatua, que los circuitos no eran simples pistas y que cada escuder√≠a ten√≠a algo que decir.
        Explorar esta d√©cada es tambi√©n entender de d√≥nde venimos, por qu√© la F1 es lo que es hoy y a qui√©nes 
        les debemos cada vuelta de rueda.
    </p>
    <p style="color: black; font-size: 16px; line-height: 1.7; font-weight: bold;">
        Hoy m√°s que nunca, conocer la historia no es nostalgia: es memoria, es homenaje, es conexi√≥n.
    </p>
</div>
""", unsafe_allow_html=True)


